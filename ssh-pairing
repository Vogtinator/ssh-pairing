#!/bin/bash
# SPDX-License-Identifier: GPL-2.0-or-later
# SPDX-FileCopyrightText: Copyright 2024 SUSE LLC

set -euo pipefail

d_styled()
{
	dialog --title $"SSH Key Enrollment" "$@"
}

# Run d_styled and save the output into $result
dialog_get_result()
{
	local retval=0
	local stdoutfd
	# Bash makes it a bit annoying to read the output of a different FD into a variable, it
	# only supports reading stdout by itself. So redirect 3 to stdout and 1 to the real stdout.
	exec {stdoutfd}>&1
	result="$(d_styled --output-fd 3 "$@" 3>&1 1>&${stdoutfd})" || retval=$?
	# Word splitting makes it necessary to use eval here.
	eval "exec ${stdoutfd}>&-"
	return "$retval"
}

handle_pubkeys()
{
	local filename="$1"
	if ! [ -s "$filename" ]; then
		d_styled --msgbox $"No public keys received!" 0 0
		return 0
	fi

	local items=()
	local lineno=1
	while read -r type key _; do
		items+=("$lineno" "${type} ${key:0:8}...${key: -20:20}" "off")
		lineno=$((lineno+1))
	done <"$filename"

	text="$(printf $"Verify that the 'ssh-pairing: Received %d public keys' message appeared on the client (%s) and select the key(s) to import." \
	               "$(wc -l <"$filename")" "$(awk '{print $3; exit}' "$filename")")"
	if ! dialog_get_result --separate-output --no-tags --checklist "$text" 0 0 0 "${items[@]}"; then
		return 0
	fi

	local input=()
	readarray -t input <<<"$result"
	# readarray converts an empty string to ("")
	if [ -z "${input[0]}" ]; then
		return 0
	fi

	(umask 077; mkdir -p ~/.ssh)
	for lineno in "${input[@]}"; do
		awk "NR==${lineno}" <"$filename" >> ~/.ssh/authorized_keys
	done

	text="$(printf $"Imported %d keys" "${#input[@]}")"
	d_styled --msgbox "$text" 0 0
}

tmpdir="$(mktemp -d)"
# shellcheck disable=SC2064
trap "rm -r ${tmpdir@Q}" EXIT

ssh_enroll_do_config()
{
	# Stop sshd.service temporarily if needed
	local start_sshd_again=0
	if systemctl -q is-active sshd.service; then
		systemctl stop sshd.service
		start_sshd_again=1
	fi

	# Make sure host keys exist
	if command -v sshd-gen-keys-start >/dev/null; then
		# Called by sshd.service on openSUSE
		sshd-gen-keys-start >/dev/null
	else
		ssh-keygen -A
	fi

	# Start the server in the background and show a dialog with information while it's running
	# and offer the option to cancel the process.
	{
		echo $"Please connect to one of the addresses with ssh:"
		hostname -I
		echo
		echo $"Please verify that the host key matches:"
		for i in /etc/ssh/ssh_host_*key.pub; do ssh-keygen -l -f "$i"; done | awk '{ print $2" "$4 }'
		echo

		echo $"Randomart for ssh -o \"VisualHostKey yes\":"
		# Display the randomart for all key types next to each other
		local allartlines=()
		for i in /etc/ssh/ssh_host_*key.pub; do
			local artlines=()
			readarray -t artlines < <(ssh-keygen -l -v -f "$i" | tail -n+2)
			for (( j=0; j < "${#artlines[@]}"; j++ )); do
				allartlines[j]="${allartlines[j]-}${artlines[j]} "
			done
		done
		( IFS=$'\n'; echo -n "${allartlines[*]}" )
	} >"${tmpdir}/msg"

	ssh-pairing-server >"${tmpdir}/pubkeys" 2>"${tmpdir}/servererr" &
	local serverpid=$!

	# Have to use dialog directly here, a shell in between would eat signals
	dialog --title $"SSH Key Enrollment" --exit-label $"Cancel" --textbox "${tmpdir}/msg" 0 0 &
	local dialogpid=$!

	# Wait for either the server or dialog to exit
	local exitcode=0
	local who=0
	wait -n -p who "$serverpid" "$dialogpid" || exitcode=$?
	if [ "$who" -eq "$serverpid" ]; then
		kill "$dialogpid" # Server exited, kill the dialog
		wait "$dialogpid" || :
	else
		kill "$serverpid" # Dialog exited, kill the server
		wait "$serverpid" || :
	fi

	if [ "$start_sshd_again" != "0" ]; then
		systemctl start sshd.service || d_styled --msgbox $"Failed to start sshd.service again" 0 0
	fi

	if [ "$who" -eq "$serverpid" ] && [ "$exitcode" -eq 0 ]; then
		handle_pubkeys "${tmpdir}/pubkeys"
	elif [ "$who" -eq "$serverpid" ]; then
		d_styled --msgbox $"ssh-pairing-server exited with ${exitcode}:\n""$(cat ${tmpdir}/servererr)" 0 0
	else
		d_styled --msgbox $"Key enrollment cancelled by user request" 0 0
	fi
}

ssh_enroll_do_config
